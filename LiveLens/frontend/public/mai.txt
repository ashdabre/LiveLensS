import { Signaler } from "./signaling.js";
import { startWasmInference, stopWasmInference } from "./inference_wasm.js";
import { drawDetections, clearOverlay } from "./overlay.js";
import { Bench } from "./bench.js";

const signaler = new Signaler(`ws://${location.hostname}:4000`);
const pcConfig = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

let pc = null;
let localStream = null;
let serverWs = null;
let processing = false;
let inferenceRunning = false;
let latestFrame = null;

const remoteVideo = document.getElementById("remoteVideo");
const overlayCanvas = document.getElementById("overlayCanvas");
const roleSelect = document.getElementById("roleSelect");
const modeSelect = document.getElementById("modeSelect");
const roomInput = document.getElementById("roomInput");

function resizeCanvasToVideo() {
  overlayCanvas.width = remoteVideo.videoWidth || 640;
  overlayCanvas.height = remoteVideo.videoHeight || 480;
  overlayCanvas.style.width = `${remoteVideo.clientWidth}px`;
  overlayCanvas.style.height = `${remoteVideo.clientHeight}px`;
}

function showNotification(title, message, type = "info") {
  console.log(`[${type.toUpperCase()}] ${title}: ${message}`);
}

/*************** PHONE URL GENERATION ***************/
function generatePhoneLink(room) {
  const phoneURL = `${location.origin}${location.pathname}?role=phone&room=${room}`;
  const qrWrap = document.getElementById('qrWrap');
  const phoneLink = document.getElementById('phoneLink');
  if (qrWrap) qrWrap.innerHTML = `Phone URL: <a href="${phoneURL}" target="_blank">${phoneURL}</a>`;
  if (phoneLink) phoneLink.innerHTML = `Or open phone URL here: <a href="${phoneURL}" target="_blank">${phoneURL}</a>`;
}

/*************** START PHONE ***************/
async function startPhone() {
  document.getElementById("phoneStatus").textContent = "Requesting camera...";
  try {
    localStream = await navigator.mediaDevices.getUserMedia({
      video: { facingMode: "environment" },
      audio: false
    });
  } catch (e) {
    document.getElementById("phoneStatus").textContent = "Camera permission denied or no camera.";
    return;
  }

  pc = new RTCPeerConnection(pcConfig);
  localStream.getTracks().forEach(t => pc.addTrack(t, localStream));
  pc.onicecandidate = (e) => { if (e.candidate) signaler.send({ type: "ice", candidate: e.candidate }); };

  await signaler.join(roomInput.value || "default", "phone");

  const offer = await pc.createOffer();
  await pc.setLocalDescription(offer);
  signaler.send({ type: "offer", sdp: pc.localDescription });

  signaler.on("answer", async (obj) => { if (obj.sdp) await pc.setRemoteDescription(new RTCSessionDescription(obj.sdp)); });
  signaler.on("ice", async (obj) => { try { if (obj.candidate) await pc.addIceCandidate(obj.candidate); } catch(e) { console.warn(e); } });

  document.getElementById("phoneStatus").textContent = "Camera started and offer sent.";
}

/*************** START VIEWER ***************/
async function startViewer() {
  const room = roomInput.value || "default";
  generatePhoneLink(room);

  pc = new RTCPeerConnection(pcConfig);

  pc.ontrack = (event) => {
    remoteVideo.srcObject = event.streams[0];
    remoteVideo.onloadedmetadata = async () => {
      remoteVideo.play();
      resizeCanvasToVideo();
      clearOverlay(overlayCanvas);
      showNotification('Viewer Started', `Connected to room "${room}"`, 'success');
      // **Do NOT start inference automatically here**
    };
  };

  pc.onicecandidate = (e) => { if (e.candidate) console.log('New ICE candidate:', e.candidate); };

  // Listen for offers from phone
  signaler.on('offer', async (offer) => {
    if (!offer.sdp) return;
    await pc.setRemoteDescription(new RTCSessionDescription(offer.sdp));
    const answer = await pc.createAnswer();
    await pc.setLocalDescription(answer);
    signaler.send({ type: 'answer', sdp: pc.localDescription });
  });
}

/*************** INFERENCE ***************/
async function startInference() {
  if (!remoteVideo.srcObject) {
    alert("Stream not ready yet. Viewer must be connected first.");
    return;
  }

  const mode = modeSelect?.value || "wasm";
  inferenceRunning = true;
  document.getElementById("viewerStatus").textContent = "Inference running...";

  clearOverlay(overlayCanvas);
  resizeCanvasToVideo();

  if (mode === "wasm") {
    await startWasmInference(remoteVideo, (meta, detections) => drawDetections(overlayCanvas, detections, meta));
    return;
  }

  serverWs = new WebSocket(`ws://${location.hostname}:5001/ws`);
  serverWs.onopen = () => { document.getElementById("viewerStatus").textContent = "Server WS open"; };
  serverWs.onmessage = (ev) => {
    const msg = JSON.parse(ev.data);
    drawDetections(overlayCanvas, msg.detections || [], msg);
    processing = false;
  };
  serverWs.onerror = (e) => console.warn("Server WS error", e);

  const captureCanvas = document.createElement("canvas");
  captureCanvas.width = 320;
  captureCanvas.height = 240;
  const ctx = captureCanvas.getContext("2d");

  const captureLoop = async () => {
    if (!inferenceRunning) return;
    if (remoteVideo.readyState < 2) { setTimeout(captureLoop, 100); return; }

    ctx.drawImage(remoteVideo, 0, 0, captureCanvas.width, captureCanvas.height);

    const bufferedOK = serverWs && serverWs.bufferedAmount < 1_000_000;
    if (!bufferedOK) { processing = false; setTimeout(captureLoop, 100); return; }

    if (!processing) {
      const b64 = captureCanvas.toDataURL("image/jpeg", 0.6);
      const frame_id = `${Date.now()}-${Math.floor(Math.random()*1000)}`;
      const capture_ts = Date.now();
      const payload = { op: "infer", frame_id, capture_ts, img: b64 };
      try { serverWs.send(JSON.stringify(payload)); processing = true; } 
      catch(e) { console.warn("Send failed", e); processing = false; }
    } else { latestFrame = true; }

    setTimeout(captureLoop, 85);
  };

  captureLoop();
}

/*************** BENCHMARK UTILITY ***************/
const bench = new Bench({ video: remoteVideo, overlay: overlayCanvas, wsUrl: `ws://${location.hostname}:5001/ws` });
window.runBench = (opts) => bench.run(opts);

/*************** BUTTONS ***************/
document.getElementById("startViewer").onclick = startViewer;
document.getElementById("startPhone").onclick = startPhone;
document.getElementById("startInference").onclick = startInference;








------------------------------------------------------------------------------------------------
/// main.js - fully updated
import { Signaler } from './signaling.js';
import { startWasmInference, stopWasmInference } from './inference_wasm.js';
import { drawDetections, clearOverlay } from './overlay.js';
import { Bench } from './bench.js';

const signaler = new Signaler(`ws://${location.hostname}:4000`);
const pcConfig = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

let pc = null;
let localStream = null;
const remoteVideo = document.getElementById('remoteVideo');
const overlayCanvas = document.getElementById('overlayCanvas');
const roleSelect = document.getElementById('roleSelect');
const modeSelect = document.getElementById('modeSelect');

function resizeCanvasToVideo() {
  overlayCanvas.width = remoteVideo.videoWidth || 640;
  overlayCanvas.height = remoteVideo.videoHeight || 480;
  overlayCanvas.style.width = `${remoteVideo.clientWidth}px`;
  overlayCanvas.style.height = `${remoteVideo.clientHeight}px`;
}

async function startViewer() {
  const role = roleSelect.value || 'viewer';
  const room = document.getElementById('roomInput').value || 'default';
  document.getElementById('viewerStatus').textContent = `Joining ${room} as ${role}`;
  await signaler.join(room, role);

  if (role === 'viewer') {
    pc = new RTCPeerConnection(pcConfig);

    pc.ontrack = (ev) => {
      remoteVideo.srcObject = ev.streams[0];
      remoteVideo.onloadedmetadata = () => {
        remoteVideo.play();
        resizeCanvasToVideo();
      };
    };
    pc.onicecandidate = (e) => { if (e.candidate) signaler.send({ type:'ice', candidate:e.candidate }); };

    signaler.on('offer', async (obj) => {
      if (!obj.sdp) return;
      await pc.setRemoteDescription(new RTCSessionDescription(obj.sdp));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      signaler.send({ type:'answer', sdp: pc.localDescription });
    });

    signaler.on('ice', async (obj) => {
      try { if (obj.candidate) await pc.addIceCandidate(obj.candidate); } catch(e){ console.warn(e); }
    });

    // populate phone URL links
    const url = `${location.origin}${location.pathname}?role=phone&room=${room}`;
    const qrWrapEl = document.getElementById('qrWrap');
    const phoneLinkEl = document.getElementById('phoneLink');
    if (qrWrapEl) qrWrapEl.innerHTML = `<a href="${url}" target="_blank" id="phoneAutoLink">Phone URL: ${url}</a>`;
    if (phoneLinkEl) phoneLinkEl.innerHTML = `Or open phone URL here: <a href="${url}" target="_blank" id="phoneAutoLink2">${url}</a>`;

  } else {
    // role=phone auto-starts if ?role=phone in URL
    const params = new URLSearchParams(window.location.search);
    if (params.get('role') === 'phone') startPhone();
  }
}

async function startPhone() {
  const room = document.getElementById('roomInput').value || 'default';
  await signaler.join(room, 'phone');

  try {
    localStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' }, audio: false });
  } catch (e) {
    document.getElementById('phoneStatus').textContent = 'Camera permission denied or no camera.';
    return;
  }

  pc = new RTCPeerConnection(pcConfig);
  localStream.getTracks().forEach(t => pc.addTrack(t, localStream));
  pc.onicecandidate = (e) => { if (e.candidate) signaler.send({ type:'ice', candidate:e.candidate }); };

  const offer = await pc.createOffer();
  await pc.setLocalDescription(offer);
  signaler.send({ type:'offer', sdp: pc.localDescription });

  signaler.on('answer', async (obj) => {
    if (obj.sdp) await pc.setRemoteDescription(new RTCSessionDescription(obj.sdp));
  });
  signaler.on('ice', async (obj) => {
    try { if (obj.candidate) await pc.addIceCandidate(obj.candidate); } catch(e){ console.warn(e); }
  });

  document.getElementById('phoneStatus').textContent = 'Camera started and offer sent.';
}

// wire buttons
document.getElementById('startViewer').onclick = startViewer;
document.getElementById('startPhone').onclick = startPhone;

// Inference logic
let inferenceRunning = false;
let serverWs = null;
let processing = false;

document.getElementById('startInference').onclick = async () => {
  if (!remoteVideo.srcObject) {
    alert('Start viewer (receive the phone stream) before starting inference.');
    return;
  }
  const mode = modeSelect.value;
  if (inferenceRunning) {
    inferenceRunning = false;
    document.getElementById('viewerStatus').textContent = 'Stopping inference';
    if (mode === 'wasm') stopWasmInference();
    if (serverWs) { serverWs.close(); serverWs = null; }
    return;
  }
  inferenceRunning = true;
  document.getElementById('viewerStatus').textContent = `Starting inference (${mode})`;
  resizeCanvasToVideo();
  clearOverlay(overlayCanvas);

  if (mode === 'wasm') {
    await startWasmInference(remoteVideo, (meta, detections) => {
      drawDetections(overlayCanvas, detections, meta);
    });
    return;
  }

  serverWs = new WebSocket(`ws://${location.hostname}:5001/ws`);
  serverWs.onopen = () => { document.getElementById('viewerStatus').textContent = 'Server WS open'; };
  serverWs.onmessage = (ev) => {
    const msg = JSON.parse(ev.data);
    drawDetections(overlayCanvas, msg.detections || [], msg);
    processing = false;
  };
  serverWs.onerror = (e) => console.warn('server ws err', e);

  const captureCanvas = document.createElement('canvas');
  captureCanvas.width = 320;
  captureCanvas.height = 240;
  const ctx = captureCanvas.getContext('2d');

  const captureLoop = async () => {
    if (!inferenceRunning) return;
    if (remoteVideo.readyState < 2) { setTimeout(captureLoop, 100); return; }

    ctx.drawImage(remoteVideo, 0, 0, captureCanvas.width, captureCanvas.height);
    if (serverWs && serverWs.bufferedAmount < 1_000_000 && !processing) {
      const b64 = captureCanvas.toDataURL('image/jpeg', 0.6);
      const payload = { op: 'infer', frame_id: `${Date.now()}-${Math.random()*1000|0}`, capture_ts: Date.now(), img: b64 };
      try { serverWs.send(JSON.stringify(payload)); processing = true; } 
      catch (e) { console.warn('send failed', e); processing = false; }
    }

    setTimeout(captureLoop, 85);
  };

  captureLoop();
};

// bench utility
const bench = new Bench({ video: remoteVideo, overlay: overlayCanvas, wsUrl: `ws://${location.hostname}:5001/ws` });
window.runBench = (opts) => bench.run(opts);



uopdte main.js when clik on str viewver in viever mode should disply phoneurl nd when clik on phn url camera permission should automticaaly asked nf when cmera enabled tht user view should displyed in viever cnvas nd when clik on str inference button inferenceshould strt frm fontend /inference_wasm.js' do u need index.html or app.py or indfernce wasm.js?
------------------------------------------------------------
index.html
</head>
<body>

<div class="container-wrapper">
  <div class="header">
    <h1>WebRTC Vision Intelligence</h1>
    <p>Enterprise-grade real-time video streaming platform with advanced computer vision capabilities and machine learning inference</p>
  </div>

  <!-- Notification Container -->
  <div id="notificationContainer"></div>

  <div id="container">
    <!-- Left Panel - System Configuration -->
    <div class="panel" id="phonePanel">
      <h3>System Configuration</h3>
      <div class="panel-description">
        Configure streaming parameters, device roles, and processing options for optimal performance
      </div>
      
      <div class="config-section">
        <div class="section-title">Connection Parameters</div>
        <div class="section-subtitle">Configure room identifier and device communication settings</div>
        
        <div class="form-group">
          <label>Room Identifier</label>
          <input id="roomInput" value="default" placeholder="default">
        </div>

        <div class="form-row">
          <div>
            <label>Device Role</label>
            <select id="roleSelect">
              <option value="viewer">viewer</option>
              <option value="phone">phone (local)</option>
            </select>
          </div>
          <div>
            <label>Processing Engine</label>
            <select id="modeSelect">
              <option value="wasm">wasm</option>
              <option value="server">server</option>
            </select>
          </div>
        </div>

        <div class="section-title" style="margin-top: 32px;">Stream Controls</div>
        <div class="section-subtitle">Initialize and manage video streaming and AI processing</div>
      </div>

      <div class="button-group">
        <div class="button-grid">
          <button id="startPhone">
            
            Start Camera (Phone)
          </button>
          <button id="startViewer">
            
            Start Viewer
          </button>
          <button id="startInference">
            
            Start Inference
          </button>
          <button id="stopInterface">
            
            Stop Interface
          </button>
        </div>
        
        <div id="phoneStatus"></div>
        <div id="viewerStatus" class="small"></div>
        <div id="phoneLink" class="small"></div>
      </div>
    </div>

    <!-- Right Panel - Live Video Stream -->
    <div class="panel" id="viewerPanel">
      <h3>Live Video Stream</h3>
      <div class="panel-desc">Real-time video processing with machine learning inference overlay and object detection</div>

      <div class="video-section">
        <div class="video-container">
          <div class="overlayWrap">
            <video id="remoteVideo" autoplay playsinline></video>
            <canvas id="overlayCanvas" class="canvasOverlay"></canvas>
            <div class="waiting-message">Awaiting video stream connection</div>
          </div>
          <!-- Local Camera Preview -->
          <div class="local-camera-container" id="localCameraContainer" style="display: none;">
            <video id="localVideo" autoplay playsinline muted></video>
            <div class="camera-label">Local Camera</div>
          </div>
        </div>
      </div>

      <div class="analytics-section">
        <div class="analytics-title">System Analytics</div>
        <div class="analytics-subtitle">Real-time monitoring and performance metrics</div>

        <div class="analytics-grid">
          <!-- System Status Card -->
          <div class="analytics-card">
            <div class="card-header">
              <div class="card-title">System Status</div>
            </div>
            <div class="status-list">
              <div class="status-item">
                <div class="status-left">
                  <div class="status-dot standby" id="cameraStatus"></div>
                  <span class="status-label">Camera Device</span>
                </div>
                <span class="status-value" id="cameraStatusText">Standby</span>
              </div>
              <div class="status-item">
                <div class="status-left">
                  <div class="status-dot disconnected" id="streamStatus"></div>
                  <span class="status-label">Stream Connection</span>
                </div>
                <span class="status-value" id="streamStatusText">Disconnected</span>
              </div>
              <div class="status-item">
                <div class="status-left">
                  <div class="status-dot inactive" id="aiStatus"></div>
                  <span class="status-label">AI Processing</span>
                </div>
                <span class="status-value" id="aiStatusText">Inactive</span>
              </div>
            </div>
          </div>

          <!-- Performance Metrics Card -->
          <div class="analytics-card">
            <div class="card-header">
              <div class="card-title">Performance Metrics</div>
            </div>
            <div class="metrics-grid">
              <div class="metric-item">
                <div class="metric-value" id="framesValue">0</div>
                <div class="metric-label">Frames/Sec</div>
              </div>
              <div class="metric-item">
                <div class="metric-value" id="latencyValue">—</div>
                <div class="metric-label">Latency</div>
              </div>
            </div>
            <div class="metrics-grid" style="margin-top: 20px;">
              <div class="metric-item">
                <div class="metric-value" id="objectsValue">0</div>
                <div class="metric-label">Objects</div>
              </div>
              <div class="metric-item">
                <div class="metric-value" id="accuracyValue">—</div>
                <div class="metric-label">Accuracy</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="qrWrap" class="small" style="padding: 0 32px;"></div>
      <div id="benchWrap" class="small" style="padding: 0 32px 32px 32px;"></div>
    </div>
  </div>
</div>

<script type="module">
// Enhanced notification system
function showNotification(title, message, type = 'info') {
  const container = document.getElementById('notificationContainer');
  
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  
  notification.innerHTML = `
    <div class="notification-title">${title}</div>
    <div class="notification-message">${message}</div>
  `;
  
  container.appendChild(notification);
  
  // Trigger show animation
  setTimeout(() => {
    notification.classList.add('show');
  }, 100);
  
  // Auto-hide after 4 seconds
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      container.removeChild(notification);
    }, 400);
  }, 4000);
}

// Enhanced status update functions
function updateCameraStatus(status, text) {
  const dot = document.getElementById('cameraStatus');
  const statusText = document.getElementById('cameraStatusText');
  
  dot.className = `status-dot ${status}`;
  statusText.textContent = text;
}

function updateStreamStatus(status, text) {
  const dot = document.getElementById('streamStatus');
  const statusText = document.getElementById('streamStatusText');
  
  dot.className = `status-dot ${status}`;
  statusText.textContent = text;
}

function updateAIStatus(status, text) {
  const dot = document.getElementById('aiStatus');
  const statusText = document.getElementById('aiStatusText');
  
  dot.className = `status-dot ${status}`;
  statusText.textContent = text;
}

// Local camera preview functionality
let localStream = null;

async function startLocalCamera() {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ 
      video: { width: 1280, height: 720 }, 
      audio: true 
    });
    
    const localVideo = document.getElementById('localVideo');
    const localContainer = document.getElementById('localCameraContainer');
    
    localVideo.srcObject = stream;
    localContainer.style.display = 'block';
    localStream = stream;
    
    updateCameraStatus('active', 'Active');
    showNotification('Camera Started', 'Local camera is now active and streaming', 'success');
    
    return stream;
  } catch (error) {
    console.error('Error accessing camera:', error);
    showNotification('Camera Error', 'Failed to access camera: ' + error.message, 'warning');
    updateCameraStatus('inactive', 'Error');
    return null;
  }
}

function stopLocalCamera() {
  if (localStream) {
    localStream.getTracks().forEach(track => track.stop());
    localStream = null;
    
    const localContainer = document.getElementById('localCameraContainer');
    localContainer.style.display = 'none';
    
    updateCameraStatus('standby', 'Standby');
    showNotification('Camera Stopped', 'Local camera has been stopped', 'info');
  }
}

// Enhanced button event listeners
document.getElementById('startPhone').addEventListener('click', async () => {
  await startLocalCamera();
  showNotification('Phone Mode', 'Camera started in phone mode', 'success');
});

document.getElementById('startViewer').addEventListener('click', () => {
  updateStreamStatus('active', 'Connected');
  showNotification('Viewer Connected', 'Video stream viewer is now active', 'success');
});

document.getElementById('startInference').addEventListener('click', () => {
  updateAIStatus('active', 'Processing');
  showNotification('AI Processing', 'Machine learning inference is now active', 'success');
  
  // Clear any existing interval
  if (window.metricsInterval) {
    clearInterval(window.metricsInterval);
  }
  
  // Simulate metrics updates
  let frames = 0;
  let objects = 0;
  
  window.metricsInterval = setInterval(() => {
    frames = Math.floor(Math.random() * 30) + 25;
    objects = Math.floor(Math.random() * 5) + 1;
    
    document.getElementById('framesValue').textContent = frames;
    document.getElementById('latencyValue').textContent = Math.floor(Math.random() * 50) + 'ms';
    document.getElementById('objectsValue').textContent = objects;
    document.getElementById('accuracyValue').textContent = (0.85 + Math.random() * 0.1).toFixed(2);
  }, 2000);
});

document.getElementById('stopInterface').addEventListener('click', () => {
  // Stop local camera
  stopLocalCamera();
  
  // Reset all status indicators
  updateStreamStatus('disconnected', 'Disconnected');
  updateAIStatus('inactive', 'Inactive');
  updateCameraStatus('standby', 'Standby');
  
  // Reset metrics
  document.getElementById('framesValue').textContent = '0';
  document.getElementById('latencyValue').textContent = '—';
  document.getElementById('objectsValue').textContent = '0';
  document.getElementById('accuracyValue').textContent = '—';
  
  // Hide waiting message if remote video is stopped
  const remoteVideo = document.getElementById('remoteVideo');
  if (remoteVideo.srcObject) {
    const tracks = remoteVideo.srcObject.getTracks();
    tracks.forEach(track => track.stop());
    remoteVideo.srcObject = null;
  }
  
  // Clear any intervals that might be running
  clearInterval(window.metricsInterval);
  
  // Reset status displays
  document.getElementById('phoneStatus').innerHTML = '';
  document.getElementById('viewerStatus').innerHTML = '';
  
  showNotification('Interface Stopped', 'All systems have been stopped and reset', 'info');
});

// Import main.js functionality
import('./main.js').catch(() => {
  console.log('main.js not found - using built-in functionality');
});
</script>
</body>
</html>